#!/bin/sh
#|-*- mode:lisp -*-|#
#|
exec ros -Q -- $0 "$@"
|#

(defpackage #:kani/roswell/kani.ros
  (:use #:cl))
(in-package #:kani/roswell/kani.ros)

(ql:quickload '(:kani) :silent t)

(defconstant +print-version+ "kani version 0.0.1~%")
(defconstant +print-usage+
"~A
Framework that supports GUI application development using GTK3 in Common Lisp

Usage: kani new [project name]

Command:
  new <project name> : Generate a project

Options:
  -v, --version   print kani version
")

(defun prompt-read (prompt)
  (format *query-io* "~a: " prompt)
  (force-output *query-io*)
  (read-line *query-io*))

(defun command-new (path &rest options)
  (declare (ignore options))
  (let* ((author      (prompt-read "author"))
         (license     (prompt-read "license (Default: MIT)"))
         (description (prompt-read "description"))
         (args (list :author author
                     :license (if (string= license "") "MIT" license)
                     :description description))
         (path (uiop:ensure-directory-pathname path)))
    (apply #'kani:make-project path args)

    (format t "~&$ qlot install~%")
    (uiop:run-program (format nil "cd '~A' && qlot install" path)
                      :output *standard-output*
                      :error-output *error-output*)))

(defun main (&optional command &rest argv)
  (cond
    ((equal command "new")
     (unless (first argv)
       (uiop:quit -1))
     (apply #'command-new argv))
    ((or (equal command "--version")
         (equal command "-v"))
     (format *error-output* +print-version+))
    (t (format *error-output* +print-usage+ +print-version+))))
